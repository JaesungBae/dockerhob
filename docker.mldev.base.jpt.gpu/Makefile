.DEFAULT_GOAL := help

#*******************************************************************************
# 가정
#-------------------------------------------------------------------------------
# 1. Docker가 설치된 Host에 접속 후
# 2. 작업 폴더를 하나 만들고
# 3. 그 아래 dockerhob 프로젝트를 clone 한 뒤
# 4. 현재 폴더로 이동했다고 가정합니다.

#*******************************************************************************
# 사용법
#-------------------------------------------------------------------------------
# (컨테이너 내부가 아니라) 호스트에서 실행되어야 합니다.
#
# 가장 먼저!
#
#   ARG_CONTAINER_NAME 을 수정하세요.
#   GPU                를 수정하세요.
#
# 사용 예
#
#   $ make run
#   $ make info
#   $ make rm
#
# 설명보기
#
#   $ make

#*******************************************************************************
# Build Args
#-------------------------------------------------------------------------------
# <CPU>
# DOCKER=docker
# PROCESSOR=CPU

# <GPU>
GPU?='"device=0"'
#DOCKER=NV_GPU=$(GPU) nvidia-docker
#-------------------------------------------------------------------------------
# JUPYTER=notebook
# JUPYTER=lab
#-------------------------------------------------------------------------------
ARG_IMAGE_NAME?=dockerhob/mldev:base-jpt-gpu-v4
ARG_CONTAINER_NAME?=mldev-base-jpt-gpu-default
# ARG_CONTAINER_HOSTNAME?=$(shell echo $(ARG_CONTAINER_NAME) | tr a-z A-Z)
ARG_CONTAINER_HOSTNAME?=$(ARG_CONTAINER_NAME)
#-------------------------------------------------------------------------------
ARG_PUID?=$(shell id -u)
ARG_PGID?=$(shell id -g)
#-------------------------------------------------------------------------------
ARG_PORT_JUPYTERNOTE?=9388
ARG_PORT_TENSORBOARD?=9306
#-------------------------------------------------------------------------------
ARG_JUPYTER_PWD?=coder
ARG_JUPYTER_PWD_HASH?=sha1:eea72ef993c9:e8ed1d0e66a00a6cdfce2d3cddf685fb9e67742f
#-------------------------------------------------------------------------------
ARG_WORKSPACE_HOST?=$(realpath ../..)
ARG_WORKSPACE_CONTAINER?=/workspace

#*******************************************************************************
# $ make xxx
#-------------------------------------------------------------------------------
_build: ## 로컬에 도커 이미지를 만듭니다.
	docker build -t $(ARG_IMAGE_NAME) \
		-f Dockerfile .

_push: ## [관리자 전용] 이미지를 레지스트리에 push 합니다.
	docker push $(ARG_IMAGE_NAME)

pull: ## 레지스트리에서 이미지를 받아옵니다.
	docker pull $(ARG_IMAGE_NAME)

run: ## 도커 컨테이너를 실행합니다. (랜덤 포트 연결)
	docker run -d --gpus $(GPU) --restart=unless-stopped \
		--name $(ARG_CONTAINER_NAME) \
		--ipc=host \
		-h $(ARG_CONTAINER_HOSTNAME) \
		-e PUID=$(ARG_PUID) -e PGID=$(ARG_PGID) \
		-e NOTEBOOKAPP_PASSWORD=$(ARG_JUPYTER_PWD_HASH) \
		-P \
		-v $(ARG_WORKSPACE_HOST):$(ARG_WORKSPACE_CONTAINER) \
		-v /etc/timezone:/etc/timezone \
		-v /etc/localtime:/etc/localtime \
		$(ARG_IMAGE_NAME)

runi: ## 도커 컨테이너를 실행합니다. (랜덤 포트 연결. 인터랙티브 모드)
	docker run -it --gpus $(GPU) --restart=unless-stopped \
		--name $(ARG_CONTAINER_NAME) \
		--ipc=host \
		-h $(ARG_CONTAINER_HOSTNAME) \
		-e PUID=$(ARG_PUID) -e PGID=$(ARG_PGID) \
		-e NOTEBOOKAPP_PASSWORD=$(ARG_JUPYTER_PWD_HASH) \
		-P \
		-v $(ARG_WORKSPACE_HOST):$(ARG_WORKSPACE_CONTAINER) \
		-v /etc/timezone:/etc/timezone \
		-v /etc/localtime:/etc/localtime \
		$(ARG_IMAGE_NAME) \
        bash

runf: ## 도커 컨테이너를 실행합니다. (고정 포트 연결)
	docker run -d --gpus $(GPU) --restart=unless-stopped \
		--name $(ARG_CONTAINER_NAME) \
		--ipc=host \
		-h $(ARG_CONTAINER_HOSTNAME) \
		-e PUID=$(ARG_PUID) -e PGID=$(ARG_PGID) \
		-e NOTEBOOKAPP_PASSWORD=$(ARG_JUPYTER_PWD_HASH) \
		-p $(ARG_PORT_JUPYTERNOTE):8888 \
		-p $(ARG_PORT_TENSORBOARD):6006 \
		-v $(ARG_WORKSPACE_HOST):$(ARG_WORKSPACE_CONTAINER) \
		-v /etc/timezone:/etc/timezone \
		-v /etc/localtime:/etc/localtime \
		$(ARG_IMAGE_NAME)

start: ## 컨테이너를 시작합니다.
	docker start $(ARG_CONTAINER_NAME)

stop: ## 컨테이너를 중지합니다.
	docker stop $(ARG_CONTAINER_NAME)

rm: stop ## 컨테이너를 중지하고 삭제합니다.
	docker rm $(ARG_CONTAINER_NAME)

info: ## Jupyter Server URL 등 출력
	$(info ----------------------------------------)
	$(info ARG_IMAGE_NAME          = $(ARG_IMAGE_NAME))
	$(info ARG_CONTAINER_NAME      = $(ARG_CONTAINER_NAME))
	$(info ARG_WORKSPACE_HOST      = $(ARG_WORKSPACE_HOST))
	$(info ARG_WORKSPACE_CONTAINER = $(ARG_WORKSPACE_CONTAINER))
	$(info ----------------------------------------)
	$(info ARG_PUID                = $(ARG_PUID))
	$(info ARG_PGID                = $(ARG_PGID))
	$(info ----------------------------------------)
	$(info ARG_JUPYTER_PWD         = $(ARG_JUPYTER_PWD))
	$(info ARG_JUPYTER_PWD_HASH    = $(ARG_JUPYTER_PWD_HASH))
	$(info ----------------------------------------)
	$(eval TB_PORT := $(shell docker port $(ARG_CONTAINER_NAME) | grep 6006/ | sed 's/.*0.0.0.0://g' | sed 's/->.*//g'))
	$(info Port(TensorBoard)=$(TB_PORT))
	$(info ----------------------------------------)
	$(eval HOST_IP := $(shell hostname -I | grep -o '^\S*'))
	$(eval JUPYTER_PORT := $(shell docker port $(ARG_CONTAINER_NAME) | grep 8888/ | sed 's/.*0.0.0.0://g' | sed 's/->.*//g'))
	$(info ==> http://$(HOST_IP):$(JUPYTER_PORT))
	$(info ----------------------------------------)

logs: ## 컨테이너 내부의 로그를 봅니다.
	docker logs $(ARG_CONTAINER_NAME)

env: ## EXEC: 컨테이너 내부의 도커 환경을 봅니다. (as coder)
	docker exec -u $(ARG_PUID):$(ARG_PGID) $(ARG_CONTAINER_NAME) env

bash: ## EXEC: 컨테이너 내부의 bash 실행 (as coder)
	docker exec -it -u $(ARG_PUID):$(ARG_PGID) $(ARG_CONTAINER_NAME) bash

bashroot: ## EXEC: 컨테이너 내부의 bash 실행 (as root)
	docker exec -it $(ARG_CONTAINER_NAME) bash

piplist: ## EXEC: 컨테이너 내부의 pip list 실행 (as coder)
	docker exec -u $(ARG_PUID):$(ARG_PGID) $(ARG_CONTAINER_NAME) pip list

cat: ## Makefile 출력
	@cat Makefile

help:
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-12s\033[0m %s\n", $$1, $$2}'
